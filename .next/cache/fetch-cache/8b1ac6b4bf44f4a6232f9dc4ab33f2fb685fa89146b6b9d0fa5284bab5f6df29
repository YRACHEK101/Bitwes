{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","age":"0","cache-control":"public, max-age=0, must-revalidate","content-disposition":"inline; filename=\"podcasts.json\"","content-encoding":"br","content-length":"3331","content-type":"application/json; charset=utf-8","date":"Sat, 01 Mar 2025 19:17:24 GMT","etag":"\"44738e32efa8f24413469aae5083caba\"","last-modified":"Sat, 01 Mar 2025 19:17:24 GMT","server":"Vercel","strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-matched-path":"/json/podcasts.json","x-vercel-cache":"HIT","x-vercel-id":"cdg1::jzndp-1740856644280-9cb4a6e5c0b7"},"body":"WwogIHsKICAgICJpZCI6IDUsCiAgICAiZXBpc29kZSI6ICLDiXBpc29kZSAwNSIsCiAgICAidGl0bGUiOiAiTGVzIGTDqWZpcyDDqWNvbm9taXF1ZXMgZHUgWFhJZSBzacOoY2xlIiwKICAgICJpbWciOiAiL2ltYWdlcy9wb2RjYXN0cy9wcmV2aWV3L3BvZGNhc3QtY292ZXItZXAwNS5qcGciLAogICAgImltZ0FsdCI6ICJVbmUgaW1hZ2UgcmV0b3VjaMOpZSBtb250cmFudCB1biBncmFwaGlxdWUgw6ljb25vbWlxdWUgYXZlYyBkZXMgZmzDqGNoZXMgbW9udGFudGVzIGV0IGRlc2NlbmRhbnRlcywgc3ltYm9saXNhbnQgbGVzIGZsdWN0dWF0aW9ucyBkdSBtYXJjaMOpLiBMZXMgbW90cyBBQ1RVQUxJVMOJUyDDiUNPTk9NSVFVRVMgc29udCBlbiBoYXV0IMOgIGdhdWNoZSwgRVAgMDUgZW4gYmFzIMOgIGdhdWNoZSwgZXQgdW5lIGZsw6hjaGUgcG9pbnRlIGVuIGJhcyDDoCBkcm9pdGUuIiwKICAgICJkYXRlIjogIjE2IG1hcnMgMjAyMiIsCiAgICAiZHVyYXRpb24iOiAiMWggMjBtaW4iLAogICAgInNsdWciOiAibGVzLWRlZmlzLWVjb25vbWlxdWVzLWR1LXh4aWUtc2llY2xlIiwKICAgICJjb250ZW50IjogWwogICAgICB7CiAgICAgICAgInN1bW1hcnkiOiAiTGVzIGTDqWZpcyDDqWNvbm9taXF1ZXMgYWN0dWVscywgdGVscyBxdWUgbCdpbmZsYXRpb24sIGxlcyBpbsOpZ2FsaXTDqXMgZXQgbGEgdHJhbnNpdGlvbiDDqWNvbG9naXF1ZSwgZmHDp29ubmVudCBsJ2F2ZW5pciBkZXMgc29jacOpdMOpcyBtb2Rlcm5lcy4gQ29tbWVudCBsZXMgcG9saXRpcXVlcyDDqWNvbm9taXF1ZXMgcGV1dmVudC1lbGxlcyByw6lwb25kcmUgw6AgY2VzIGVuamV1eCB0b3V0IGVuIGdhcmFudGlzc2FudCB1bmUgY3JvaXNzYW5jZSBkdXJhYmxlID8iLAogICAgICAgICJzZWN0aW9uMSI6ICJMJ8OpY29ub21pZSBtb25kaWFsZSBlc3QgY29uZnJvbnTDqWUgw6AgZGVzIGTDqWZpcyBzYW5zIHByw6ljw6lkZW50LiBMJ2luZmxhdGlvbiBnYWxvcGFudGUsIGxlcyBpbsOpZ2FsaXTDqXMgY3JvaXNzYW50ZXMgZXQgbGEgbsOpY2Vzc2l0w6kgZCd1bmUgdHJhbnNpdGlvbiDDqWNvbG9naXF1ZSByYXBpZGUgaW1wb3NlbnQgdW5lIHLDqWZsZXhpb24gYXBwcm9mb25kaWUgc3VyIGxlcyBtb2TDqGxlcyDDqWNvbm9taXF1ZXMgYWN0dWVscy4gXG5cbkxlcyBnb3V2ZXJuZW1lbnRzIGV0IGxlcyBpbnN0aXR1dGlvbnMgaW50ZXJuYXRpb25hbGVzIGRvaXZlbnQgdHJvdXZlciB1biDDqXF1aWxpYnJlIGVudHJlIGNyb2lzc2FuY2Ugw6ljb25vbWlxdWUgZXQgZHVyYWJpbGl0w6kuIExlcyBwb2xpdGlxdWVzIG1vbsOpdGFpcmVzIGV0IGZpc2NhbGVzIGpvdWVudCB1biByw7RsZSBjcnVjaWFsIGRhbnMgY2V0dGUgdHJhbnNpdGlvbiwgbWFpcyBlbGxlcyBkb2l2ZW50IMOqdHJlIGFjY29tcGFnbsOpZXMgZGUgcsOpZm9ybWVzIHN0cnVjdHVyZWxsZXMgcG91ciDDqnRyZSBlZmZpY2FjZXMuIiwKICAgICAgICAicXVvdGUiOiBbCiAgICAgICAgICAiTCfDqWNvbm9taWUgZXN0IGwnYXJ0IGRlIHNhdGlzZmFpcmUgZGVzIGJlc29pbnMgaWxsaW1pdMOpcyBhdmVjIGRlcyByZXNzb3VyY2VzIGxpbWl0w6llcy4iLAogICAgICAgICAgIkpvaG4gTWF5bmFyZCBLZXluZXMiCiAgICAgICAgXSwKICAgICAgICAic2VjdGlvbjIiOiAiTGEgdHJhbnNpdGlvbiDDqWNvbG9naXF1ZSBlc3QgbCd1biBkZXMgZMOpZmlzIG1hamV1cnMgZHUgWFhJZSBzacOoY2xlLiBMZXMgZW50cmVwcmlzZXMgZXQgbGVzIGdvdXZlcm5lbWVudHMgZG9pdmVudCBpbnZlc3RpciBtYXNzaXZlbWVudCBkYW5zIGxlcyDDqW5lcmdpZXMgcmVub3V2ZWxhYmxlcyBldCBsZXMgdGVjaG5vbG9naWVzIHZlcnRlcyBwb3VyIHLDqWR1aXJlIGxldXIgZW1wcmVpbnRlIGNhcmJvbmUuIFxuXG5DZXBlbmRhbnQsIGNldHRlIHRyYW5zaXRpb24gbmUgcGV1dCBzZSBmYWlyZSBhdSBkw6l0cmltZW50IGRlcyBwb3B1bGF0aW9ucyBsZXMgcGx1cyB2dWxuw6lyYWJsZXMuIExlcyBwb2xpdGlxdWVzIMOpY29ub21pcXVlcyBkb2l2ZW50IMOqdHJlIGluY2x1c2l2ZXMgZXQgZ2FyYW50aXIgcXVlIGxlcyBiw6luw6lmaWNlcyBkZSBsYSBjcm9pc3NhbmNlIHNvaWVudCBwYXJ0YWfDqXMgw6lxdWl0YWJsZW1lbnQuIFxuXG5FbmZpbiwgbGEgY29vcMOpcmF0aW9uIGludGVybmF0aW9uYWxlIGVzdCBlc3NlbnRpZWxsZSBwb3VyIHJlbGV2ZXIgY2VzIGTDqWZpcy4gTGVzIHBheXMgZG9pdmVudCB0cmF2YWlsbGVyIGVuc2VtYmxlIHBvdXIgY3LDqWVyIHVuIGVudmlyb25uZW1lbnQgw6ljb25vbWlxdWUgc3RhYmxlIGV0IGR1cmFibGUsIG/DuSBsYSBwcm9zcMOpcml0w6kgZXN0IGFjY2Vzc2libGUgw6AgdG91cy4iCiAgICAgIH0KICAgIF0KICB9LAogIHsKICAgICJpZCI6IDQsCiAgICAiZXBpc29kZSI6ICLDiXBpc29kZSAwNCIsCiAgICAidGl0bGUiOiAiTCdpbXBhY3QgZGUgbGEgbW9uZGlhbGlzYXRpb24gc3VyIGxlcyDDqWNvbm9taWVzIGxvY2FsZXMiLAogICAgImltZyI6ICIvaW1hZ2VzL3BvZGNhc3RzL3ByZXZpZXcvcG9kY2FzdC1jb3Zlci1lcDA0LmpwZyIsCiAgICAiaW1nQWx0IjogIlVuZSBpbWFnZSByZXRvdWNow6llIG1vbnRyYW50IHVuZSBjYXJ0ZSBkdSBtb25kZSBhdmVjIGRlcyBmbHV4IGNvbW1lcmNpYXV4IHN5bWJvbGlzw6lzIHBhciBkZXMgZmzDqGNoZXMuIExlcyBtb3RzIEFDVFVBTElUw4lTIMOJQ09OT01JUVVFUyBzb250IGVuIGhhdXQgw6AgZ2F1Y2hlLCBFUCAwNCBlbiBiYXMgw6AgZ2F1Y2hlLCBldCB1bmUgZmzDqGNoZSBwb2ludGUgZW4gYmFzIMOgIGRyb2l0ZS4iLAogICAgImRhdGUiOiAiMTYgbWFycyAyMDIyIiwKICAgICJkdXJhdGlvbiI6ICIxaCAyMG1pbiIsCiAgICAic2x1ZyI6ICJpbXBhY3QtbW9uZGlhbGlzYXRpb24tZWNvbm9taWVzLWxvY2FsZXMiLAogICAgImNvbnRlbnQiOiBbCiAgICAgIHsKICAgICAgICAic3VtbWFyeSI6ICJMYSBtb25kaWFsaXNhdGlvbiBhIHRyYW5zZm9ybcOpIGxlcyDDqWNvbm9taWVzIGxvY2FsZXMsIGNyw6lhbnQgw6AgbGEgZm9pcyBkZXMgb3Bwb3J0dW5pdMOpcyBldCBkZXMgZMOpZmlzLiBDb21tZW50IGxlcyBjb21tdW5hdXTDqXMgcGV1dmVudC1lbGxlcyBzJ2FkYXB0ZXIgw6AgY2VzIGNoYW5nZW1lbnRzIHRvdXQgZW4gcHLDqXNlcnZhbnQgbGV1ciBpZGVudGl0w6kgw6ljb25vbWlxdWUgPyIsCiAgICAgICAgInNlY3Rpb24xIjogIkxhIG1vbmRpYWxpc2F0aW9uIGEgcGVybWlzIHVuZSBpbnTDqWdyYXRpb24gw6ljb25vbWlxdWUgc2FucyBwcsOpY8OpZGVudCwgZmFjaWxpdGFudCBsZXMgw6ljaGFuZ2VzIGNvbW1lcmNpYXV4IGV0IGxlcyBpbnZlc3Rpc3NlbWVudHMgaW50ZXJuYXRpb25hdXguIENlcGVuZGFudCwgZWxsZSBhIMOpZ2FsZW1lbnQgZW50cmHDrm7DqSB1bmUgY29uY3VycmVuY2UgYWNjcnVlIHBvdXIgbGVzIGVudHJlcHJpc2VzIGxvY2FsZXMsIG1lbmHDp2FudCBsZXVyIHN1cnZpZS4gXG5cbkxlcyDDqWNvbm9taWVzIGxvY2FsZXMgZG9pdmVudCBzJ2FkYXB0ZXIgw6AgY2V0dGUgbm91dmVsbGUgcsOpYWxpdMOpIGVuIGlubm92YW50IGV0IGVuIHNlIHNww6ljaWFsaXNhbnQgZGFucyBkZXMgbmljaGVzIG/DuSBlbGxlcyBwZXV2ZW50IGV4Y2VsbGVyLiBMZXMgcG9saXRpcXVlcyBwdWJsaXF1ZXMgcGV1dmVudCBqb3VlciB1biByw7RsZSBjbMOpIGVuIHNvdXRlbmFudCBsZXMgcGV0aXRlcyBldCBtb3llbm5lcyBlbnRyZXByaXNlcyBldCBlbiBlbmNvdXJhZ2VhbnQgbCdpbm5vdmF0aW9uLiIsCiAgICAgICAgInF1b3RlIjogWwogICAgICAgICAgIkxhIG1vbmRpYWxpc2F0aW9uIGVzdCB1bmUgZm9yY2UgcHVpc3NhbnRlLCBtYWlzIGVsbGUgZG9pdCDDqnRyZSBtYcOudHJpc8OpZSBwb3VyIHByb2ZpdGVyIMOgIHRvdXMuIiwKICAgICAgICAgICJKb3NlcGggU3RpZ2xpdHoiCiAgICAgICAgXSwKICAgICAgICAic2VjdGlvbjIiOiAiTGVzIGNvbW11bmF1dMOpcyBsb2NhbGVzIGRvaXZlbnQgw6lnYWxlbWVudCBzZSBtb2JpbGlzZXIgcG91ciBwcsOpc2VydmVyIGxldXIgaWRlbnRpdMOpIMOpY29ub21pcXVlLiBMZXMgaW5pdGlhdGl2ZXMgbG9jYWxlcywgdGVsbGVzIHF1ZSBsZXMgY2lyY3VpdHMgY291cnRzIGV0IGxlcyBtb25uYWllcyBsb2NhbGVzLCBwZXV2ZW50IHJlbmZvcmNlciBsJ8OpY29ub21pZSB0b3V0IGVuIHByw6lzZXJ2YW50IGxlcyB0cmFkaXRpb25zIGV0IGxlcyBzYXZvaXItZmFpcmUgbG9jYXV4LiBcblxuRW5maW4sIGxhIG1vbmRpYWxpc2F0aW9uIG5lIGRvaXQgcGFzIMOqdHJlIHBlcsOndWUgY29tbWUgdW5lIG1lbmFjZSwgbWFpcyBjb21tZSB1bmUgb3Bwb3J0dW5pdMOpLiBFbiBjb2xsYWJvcmFudCBhdmVjIGxlcyBhY3RldXJzIGludGVybmF0aW9uYXV4LCBsZXMgw6ljb25vbWllcyBsb2NhbGVzIHBldXZlbnQgdGlyZXIgcGFydGkgZGVzIGF2YW50YWdlcyBkZSBsYSBtb25kaWFsaXNhdGlvbiB0b3V0IGVuIG1pbmltaXNhbnQgc2VzIGluY29udsOpbmllbnRzLiIKICAgICAgfQogICAgXQogIH0sCiAgewogICAgImlkIjogMywKICAgICJlcGlzb2RlIjogIsOJcGlzb2RlIDAzIiwKICAgICJ0aXRsZSI6ICJMYSByw6l2b2x1dGlvbiBudW3DqXJpcXVlIGV0IHNlcyBpbXBhY3RzIMOpY29ub21pcXVlcyIsCiAgICAiaW1nIjogIi9pbWFnZXMvcG9kY2FzdHMvcHJldmlldy9wb2RjYXN0LWNvdmVyLWVwMDMuanBnIiwKICAgICJpbWdBbHQiOiAiVW5lIGltYWdlIHJldG91Y2jDqWUgbW9udHJhbnQgdW4gb3JkaW5hdGV1ciBwb3J0YWJsZSBlbnRvdXLDqSBkJ2ljw7RuZXMgbnVtw6lyaXF1ZXMuIExlcyBtb3RzIEFDVFVBTElUw4lTIMOJQ09OT01JUVVFUyBzb250IGVuIGhhdXQgw6AgZ2F1Y2hlLCBFUCAwMyBlbiBiYXMgw6AgZ2F1Y2hlLCBldCB1bmUgZmzDqGNoZSBwb2ludGUgZW4gYmFzIMOgIGRyb2l0ZS4iLAogICAgImRhdGUiOiAiMTYgbWFycyAyMDIyIiwKICAgICJkdXJhdGlvbiI6ICIxaCAyMG1pbiIsCiAgICAic2x1ZyI6ICJyZXZvbHV0aW9uLW51bWVyaXF1ZS1pbXBhY3RzLWVjb25vbWlxdWVzIiwKICAgICJjb250ZW50IjogWwogICAgICB7CiAgICAgICAgInN1bW1hcnkiOiAiTGEgcsOpdm9sdXRpb24gbnVtw6lyaXF1ZSBhIHRyYW5zZm9ybcOpIGwnw6ljb25vbWllIG1vbmRpYWxlLCBjcsOpYW50IGRlIG5vdXZlbGxlcyBvcHBvcnR1bml0w6lzIHRvdXQgZW4gcG9zYW50IGRlcyBkw6lmaXMgaW7DqWRpdHMuIENvbW1lbnQgbGVzIGVudHJlcHJpc2VzIGV0IGxlcyBnb3V2ZXJuZW1lbnRzIHBldXZlbnQtaWxzIHMnYWRhcHRlciDDoCBjZXR0ZSBub3V2ZWxsZSByw6lhbGl0w6kgPyIsCiAgICAgICAgInNlY3Rpb24xIjogIkxhIHLDqXZvbHV0aW9uIG51bcOpcmlxdWUgYSBib3VsZXZlcnPDqSBsZXMgbW9kw6hsZXMgw6ljb25vbWlxdWVzIHRyYWRpdGlvbm5lbHMsIHBlcm1ldHRhbnQgbCfDqW1lcmdlbmNlIGRlIG5vdXZlbGxlcyBpbmR1c3RyaWVzIGV0IGxhIHRyYW5zZm9ybWF0aW9uIGRlcyBzZWN0ZXVycyBleGlzdGFudHMuIExlcyB0ZWNobm9sb2dpZXMgdGVsbGVzIHF1ZSBsJ2ludGVsbGlnZW5jZSBhcnRpZmljaWVsbGUsIGxhIGJsb2NrY2hhaW4gZXQgbCdJbnRlcm5ldCBkZXMgb2JqZXRzIG91dnJlbnQgZGVzIHBlcnNwZWN0aXZlcyBpbsOpZGl0ZXMgcG91ciBsZXMgZW50cmVwcmlzZXMuIFxuXG5DZXBlbmRhbnQsIGNldHRlIHRyYW5zZm9ybWF0aW9uIHMnYWNjb21wYWduZSDDqWdhbGVtZW50IGRlIGTDqWZpcywgdGVscyBxdWUgbGEgcHJvdGVjdGlvbiBkZXMgZG9ubsOpZXMsIGxhIGN5YmVyc8OpY3VyaXTDqSBldCBsYSBnZXN0aW9uIGRlcyBjb21ww6l0ZW5jZXMgbnVtw6lyaXF1ZXMuIExlcyBlbnRyZXByaXNlcyBkb2l2ZW50IGludmVzdGlyIGRhbnMgbGEgZm9ybWF0aW9uIGV0IGwnaW5ub3ZhdGlvbiBwb3VyIHJlc3RlciBjb21ww6l0aXRpdmVzLiIsCiAgICAgICAgInF1b3RlIjogWwogICAgICAgICAgIkxlIG51bcOpcmlxdWUgZXN0IHVuZSBvcHBvcnR1bml0w6ksIG1haXMgaWwgbsOpY2Vzc2l0ZSB1bmUgYWRhcHRhdGlvbiBjb25zdGFudGUuIiwKICAgICAgICAgICJCaWxsIEdhdGVzIgogICAgICAgIF0sCiAgICAgICAgInNlY3Rpb24yIjogIkxlcyBnb3V2ZXJuZW1lbnRzIG9udCDDqWdhbGVtZW50IHVuIHLDtGxlIGNydWNpYWwgw6Agam91ZXIgZGFucyBjZXR0ZSB0cmFuc2l0aW9uLiBMZXMgcG9saXRpcXVlcyBwdWJsaXF1ZXMgZG9pdmVudCBlbmNvdXJhZ2VyIGwnaW5ub3ZhdGlvbiB0b3V0IGVuIGdhcmFudGlzc2FudCB1bmUgcsOpZ3VsYXRpb24gYWRhcHTDqWUgcG91ciBwcm90w6lnZXIgbGVzIGNvbnNvbW1hdGV1cnMgZXQgbGVzIHRyYXZhaWxsZXVycy4gXG5cbkVuZmluLCBsYSByw6l2b2x1dGlvbiBudW3DqXJpcXVlIGRvaXQgw6p0cmUgaW5jbHVzaXZlLiBMZXMgcGF5cyBlbiBkw6l2ZWxvcHBlbWVudCBkb2l2ZW50IGLDqW7DqWZpY2llciBkZXMgYXZhbnRhZ2VzIGRlIGNldHRlIHRyYW5zZm9ybWF0aW9uLCB0b3V0IGVuIMOpdGFudCBzb3V0ZW51cyBwb3VyIHN1cm1vbnRlciBsZXMgb2JzdGFjbGVzIGxpw6lzIMOgIGwnYWNjw6hzIGF1eCB0ZWNobm9sb2dpZXMgZXQgYXV4IGNvbXDDqXRlbmNlcyBudW3DqXJpcXVlcy4iCiAgICAgIH0KICAgIF0KICB9LAogIHsKICAgICJpZCI6IDIsCiAgICAiZXBpc29kZSI6ICLDiXBpc29kZSAwMiIsCiAgICAidGl0bGUiOiAiTGVzIGluw6lnYWxpdMOpcyDDqWNvbm9taXF1ZXMgOiBjYXVzZXMgZXQgc29sdXRpb25zIiwKICAgICJpbWciOiAiL2ltYWdlcy9wb2RjYXN0cy9wcmV2aWV3L3BvZGNhc3QtY292ZXItZXAwMi5qcGciLAogICAgImltZ0FsdCI6ICJVbmUgaW1hZ2UgcmV0b3VjaMOpZSBtb250cmFudCB1bmUgYmFsYW5jZSBzeW1ib2xpc2FudCBsZXMgaW7DqWdhbGl0w6lzIMOpY29ub21pcXVlcy4gTGVzIG1vdHMgQUNUVUFMSVTDiVMgw4lDT05PTUlRVUVTIHNvbnQgZW4gaGF1dCDDoCBnYXVjaGUsIEVQIDAyIGVuIGJhcyDDoCBnYXVjaGUsIGV0IHVuZSBmbMOoY2hlIHBvaW50ZSBlbiBiYXMgw6AgZHJvaXRlLiIsCiAgICAiZGF0ZSI6ICIxNiBtYXJzIDIwMjIiLAogICAgImR1cmF0aW9uIjogIjFoIDIwbWluIiwKICAgICJzbHVnIjogImluZWdhbGl0ZXMtZWNvbm9taXF1ZXMtY2F1c2VzLXNvbHV0aW9ucyIsCiAgICAiY29udGVudCI6IFsKICAgICAgewogICAgICAgICJzdW1tYXJ5IjogIkxlcyBpbsOpZ2FsaXTDqXMgw6ljb25vbWlxdWVzIHNvbnQgdW4gZMOpZmkgbWFqZXVyIHBvdXIgbGVzIHNvY2nDqXTDqXMgbW9kZXJuZXMuIFF1ZWxsZXMgZW4gc29udCBsZXMgY2F1c2VzIGV0IGNvbW1lbnQgcG91dm9ucy1ub3VzIGxlcyBzdXJtb250ZXIgcG91ciBjcsOpZXIgdW5lIMOpY29ub21pZSBwbHVzIGp1c3RlID8iLAogICAgICAgICJzZWN0aW9uMSI6ICJMZXMgaW7DqWdhbGl0w6lzIMOpY29ub21pcXVlcyBzb250IGxlIHLDqXN1bHRhdCBkZSBtdWx0aXBsZXMgZmFjdGV1cnMsIG5vdGFtbWVudCBsZXMgZGlzcGFyaXTDqXMgZCdhY2PDqHMgw6AgbCfDqWR1Y2F0aW9uLCBsZXMgcG9saXRpcXVlcyBmaXNjYWxlcyBpbsOpcXVpdGFibGVzIGV0IGxlcyBkeW5hbWlxdWVzIGR1IG1hcmNow6kgZHUgdHJhdmFpbC4gQ2VzIGluw6lnYWxpdMOpcyBvbnQgZGVzIGNvbnPDqXF1ZW5jZXMgcHJvZm9uZGVzIHN1ciBsYSBjb2jDqXNpb24gc29jaWFsZSBldCBsYSBzdGFiaWxpdMOpIMOpY29ub21pcXVlLiBcblxuUG91ciByw6lkdWlyZSBjZXMgaW7DqWdhbGl0w6lzLCBpbCBlc3QgZXNzZW50aWVsIGRlIG1ldHRyZSBlbiBwbGFjZSBkZXMgcG9saXRpcXVlcyBwdWJsaXF1ZXMgY2libMOpZXMsIHRlbGxlcyBxdWUgbCdhdWdtZW50YXRpb24gZHUgc2FsYWlyZSBtaW5pbXVtLCBsJ2Ftw6lsaW9yYXRpb24gZGUgbCdhY2PDqHMgw6AgbCfDqWR1Y2F0aW9uIGV0IGxhIHLDqWZvcm1lIGRlcyBzeXN0w6htZXMgZmlzY2F1eC4iLAogICAgICAgICJxdW90ZSI6IFsKICAgICAgICAgICJMZXMgaW7DqWdhbGl0w6lzIG5lIHNvbnQgcGFzIHVuZSBmYXRhbGl0w6ksIG1haXMgbGUgcsOpc3VsdGF0IGRlIGNob2l4IHBvbGl0aXF1ZXMuIiwKICAgICAgICAgICJUaG9tYXMgUGlrZXR0eSIKICAgICAgICBdLAogICAgICAgICJzZWN0aW9uMiI6ICJMZXMgZW50cmVwcmlzZXMgb250IMOpZ2FsZW1lbnQgdW4gcsO0bGUgw6Agam91ZXIgZGFucyBsYSByw6lkdWN0aW9uIGRlcyBpbsOpZ2FsaXTDqXMuIEVuIGFkb3B0YW50IGRlcyBwcmF0aXF1ZXMgcmVzcG9uc2FibGVzLCB0ZWxsZXMgcXVlIGwnw6lxdWl0w6kgc2FsYXJpYWxlIGV0IGwnaW52ZXN0aXNzZW1lbnQgZGFucyBsZXMgY29tbXVuYXV0w6lzIGxvY2FsZXMsIGVsbGVzIHBldXZlbnQgY29udHJpYnVlciDDoCB1bmUgw6ljb25vbWllIHBsdXMgaW5jbHVzaXZlLiBcblxuRW5maW4sIGxhIGNvb3DDqXJhdGlvbiBpbnRlcm5hdGlvbmFsZSBlc3QgZXNzZW50aWVsbGUgcG91ciBsdXR0ZXIgY29udHJlIGxlcyBpbsOpZ2FsaXTDqXMgw6ljb25vbWlxdWVzLiBMZXMgcGF5cyBkb2l2ZW50IHRyYXZhaWxsZXIgZW5zZW1ibGUgcG91ciBjcsOpZXIgdW4gc3lzdMOobWUgw6ljb25vbWlxdWUgbW9uZGlhbCBwbHVzIMOpcXVpdGFibGUsIG/DuSBsZXMgb3Bwb3J0dW5pdMOpcyBzb250IGFjY2Vzc2libGVzIMOgIHRvdXMuIgogICAgICB9CiAgICBdCiAgfSwKICB7CiAgICAiaWQiOiAxLAogICAgImVwaXNvZGUiOiAiw4lwaXNvZGUgMDEiLAogICAgInRpdGxlIjogIkxlcyB0ZW5kYW5jZXMgw6ljb25vbWlxdWVzIMOgIHN1aXZyZSBlbiAyMDIzIiwKICAgICJpbWciOiAiL2ltYWdlcy9wb2RjYXN0cy9wcmV2aWV3L3BvZGNhc3QtY292ZXItZXAwMS5qcGciLAogICAgImltZ0FsdCI6ICJVbmUgaW1hZ2UgcmV0b3VjaMOpZSBtb250cmFudCB1biBncmFwaGlxdWUgZW4gY3JvaXNzYW5jZSBhdmVjIGRlcyBmbMOoY2hlcyBtb250YW50ZXMuIExlcyBtb3RzIEFDVFVBTElUw4lTIMOJQ09OT01JUVVFUyBzb250IGVuIGhhdXQgw6AgZ2F1Y2hlLCBFUCAwMSBlbiBiYXMgw6AgZ2F1Y2hlLCBldCB1bmUgZmzDqGNoZSBwb2ludGUgZW4gYmFzIMOgIGRyb2l0ZS4iLAogICAgImRhdGUiOiAiMTYgbWFycyAyMDIyIiwKICAgICJkdXJhdGlvbiI6ICIxaCAyMG1pbiIsCiAgICAic2x1ZyI6ICJ0ZW5kYW5jZXMtZWNvbm9taXF1ZXMtMjAyMyIsCiAgICAiY29udGVudCI6IFsKICAgICAgewogICAgICAgICJzdW1tYXJ5IjogIkwnYW5uw6llIDIwMjMgcydhbm5vbmNlIHJpY2hlIGVuIGTDqWZpcyBldCBlbiBvcHBvcnR1bml0w6lzIHBvdXIgbCfDqWNvbm9taWUgbW9uZGlhbGUuIFF1ZWxsZXMgc29udCBsZXMgdGVuZGFuY2VzIMOgIHN1aXZyZSBldCBjb21tZW50IGxlcyBlbnRyZXByaXNlcyBwZXV2ZW50LWVsbGVzIHMneSBwcsOpcGFyZXIgPyIsCiAgICAgICAgInNlY3Rpb24xIjogIkwnYW5uw6llIDIwMjMgc2VyYSBtYXJxdcOpZSBwYXIgcGx1c2lldXJzIHRlbmRhbmNlcyDDqWNvbm9taXF1ZXMgbWFqZXVyZXMsIG5vdGFtbWVudCBsYSBtb250w6llIGVuIHB1aXNzYW5jZSBkZXMgdGVjaG5vbG9naWVzIHZlcnRlcywgbCfDqXZvbHV0aW9uIGRlcyBtYXJjaMOpcyBmaW5hbmNpZXJzIGV0IGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlcyBjb21wb3J0ZW1lbnRzIGRlcyBjb25zb21tYXRldXJzLiBMZXMgZW50cmVwcmlzZXMgZG9pdmVudCByZXN0ZXIgYWdpbGVzIHBvdXIgcydhZGFwdGVyIMOgIGNlcyDDqXZvbHV0aW9ucy4gXG5cbkxlcyB0ZWNobm9sb2dpZXMgdmVydGVzLCBlbiBwYXJ0aWN1bGllciwgb2ZmcmVudCBkZXMgb3Bwb3J0dW5pdMOpcyBjb25zaWTDqXJhYmxlcyBwb3VyIGxlcyBlbnRyZXByaXNlcyBpbm5vdmFudGVzLiBMZXMgaW52ZXN0aXNzZW1lbnRzIGRhbnMgbGVzIMOpbmVyZ2llcyByZW5vdXZlbGFibGVzIGV0IGxlcyBzb2x1dGlvbnMgZHVyYWJsZXMgc2Vyb250IGVzc2VudGllbHMgcG91ciByw6lwb25kcmUgYXV4IGF0dGVudGVzIGRlcyBjb25zb21tYXRldXJzIGV0IGRlcyByw6lndWxhdGV1cnMuIiwKICAgICAgICAicXVvdGUiOiBbCiAgICAgICAgICAiTCdpbm5vdmF0aW9uIGVzdCBsYSBjbMOpIHBvdXIgcmVzdGVyIGNvbXDDqXRpdGlmIGRhbnMgdW4gbW9uZGUgZW4gY29uc3RhbnRlIMOpdm9sdXRpb24uIiwKICAgICAgICAgICJFbG9uIE11c2siCiAgICAgICAgXSwKICAgICAgICAic2VjdGlvbjIiOiAiTGVzIG1hcmNow6lzIGZpbmFuY2llcnMgc2Vyb250IMOpZ2FsZW1lbnQgw6Agc3VydmVpbGxlciBkZSBwcsOocyBlbiAyMDIzLiBMZXMgdGF1eCBkJ2ludMOpcsOqdCwgbGVzIGZsdWN0dWF0aW9ucyBkZXMgZGV2aXNlcyBldCBsZXMgdGVuc2lvbnMgZ8Opb3BvbGl0aXF1ZXMgYXVyb250IHVuIGltcGFjdCBzaWduaWZpY2F0aWYgc3VyIGxlcyBpbnZlc3Rpc3NlbWVudHMgZXQgbGVzIHN0cmF0w6lnaWVzIGQnZW50cmVwcmlzZS4gXG5cbkVuZmluLCBsZXMgZW50cmVwcmlzZXMgZG9pdmVudCDDqnRyZSBhdHRlbnRpdmVzIGF1eCBjaGFuZ2VtZW50cyBkYW5zIGxlcyBjb21wb3J0ZW1lbnRzIGRlcyBjb25zb21tYXRldXJzLiBMYSBkaWdpdGFsaXNhdGlvbiBldCBsYSByZWNoZXJjaGUgZGUgcHJvZHVpdHMgZHVyYWJsZXMgaW5mbHVlbmNlcm9udCBsZXMgZMOpY2lzaW9ucyBkJ2FjaGF0LCBuw6ljZXNzaXRhbnQgdW5lIGFkYXB0YXRpb24gcmFwaWRlIGRlcyBvZmZyZXMgZXQgZGVzIHN0cmF0w6lnaWVzIG1hcmtldGluZy4iCiAgICAgIH0KICAgIF0KICB9Cl0=","status":200,"url":"https://bitwes.vercel.app/json/podcasts.json"},"revalidate":31536000,"tags":[]}